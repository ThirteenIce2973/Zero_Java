/**
 * @Author: HoBoxz (Justin Ho).
 * @Contact: E-mail at 2713281947@qq.com.
 * @Website: Github https://github.com/HoBoxz.
 * @Description: The code for the Chapter 01 of Java Zero's study.
 * @Last_Study: P60 - https://www.bilibili.com/video/BV1Rx411876f?p=219&vd_source=f1611b7fcea8c4a28d295ef2ab3c90df.
 */

public class Indentifier { //声明了一个类名

    public static void main (String[] args){ //程序的入口，main方法体
        
    int fUCK = 114514; 
		//定义int变量为整数型，int占4个字节
	int indentifier = 1919; 
		// Indentifier 翻译为标识符
	int var = 810; 
		// Var 翻译为变量
		
		
		System.out.print ("示例："+fUCK+" "); 
			// 向控制台输出一段话（最后一个字符之后）。而在输出字符的""内必须有字符，如：空格。

					/*
						* print与 println 的不同之处在于：
							print 将它的参数显示在命令窗口，并将输出光标定位在所显示的最后一个字符之后。
							println 将它的参数显示在命令窗口，并在结尾加上换行符，将输出光标定位在下一行的开始。

						*则输出：
							示例：114514 ERROR
							1919 810
					*/ 

		System.out.println ("ERROR");
			// 向控制台输出一段话（光标在下一行的开始）
		System.out.println (indentifier +" "+ var); 
			// 当一行中需要输入两个不相同的变量时，可以在中间加上空格输出：a+" "+b。


/*
                        *1.10.3 注释应该怎么写
		编写注释是程序员最基本的素质，养成编写注释的好习惯，要有编写注释的意识。

		当然，写注释也是有技巧的，不是所有位置都写，不是把写的代码原版翻译过来，老程序员往往在写
	注释的时候，不多不少，能够做到恰到好处，几句话就可以描述清楚程序的核心功能。
	
		通常要在类和接口上写注释，这一部分注释是必须的。在这里，我们需要使用 javadoc 注
	释，需要标明：创建者，创建时间，版本，以及该类的作用。在方法中，我们需要对入参，出
	参，以及返回值，均要标明。对常量，我们需要使用多行注释，进行标明该常量的用途。在关
	键算法上，添加注释并且按照顺序依次标明，写明白该方法为什么这么做。 

		TODO: 记住：注释的作用不在于表示代码的含义，而在于表示代码的功能。
	希望在以后的课程当中通过慢慢的培养，能够写一手漂亮的注释，当然，目前大家只需要掌握注释有哪几种，分别
	写到什么符号里就行了。


					*1.10.4 为 HelloWorld 提供注释
		接下来我们为 HelloWorld 程序提供简单的注释信息，来练习一下注释的编写：

public class HelloWorld {
	
	/ 这是程序的入口
	/ @param args 参数
	
public static void main(String[] args) {
	/ 向控制台输出一段话
	System.out.println("动力节点-口口相传的 Java 黄埔军校！");

	}
}
   		通过以上代码我们可以看到，HelloWorld 类上写了一个 javadoc 注释，在 javadoc 注释中提
   供了对这个类的整体描述信息、作者信息、版本号信息等。在 main 方法上提供了 javadoc 注
   释，对这个方法进行了说明，对参数进行了说明等。在输出信息的那行代码上提供了单行注释，
   说明了这行代码的作用。
   
 */



     // *** Zero 章节一：标识符的介绍和 Java 的简要理解。
/*            
            *SC: 标识符的命名规则


 1. Q: 什么是标识符？
	    A: 凡是程序员自己有权利命名的单词都是标识符。
	
        
 2. Q: 标识符可以随意编写吗，有命名规则吗？
        A: 有。
		
        那么，什么是命名规则？
			命名规则属于语法机制，必须遵守，不遵守命名规则标识不符合语法，
			这样，编译器会报错。

		规则1：标识符只能由数字、字母（包括中文）、下划线_、美元符号$组成，
		不能含有其它符号。

		规则2：标识符不能以数字开头

		规则3：关键字不能做标识符。例如：public class static void 这些字都是关键字，关键字是不能做标识符的。

		规则4：标识符是严格区分大小写的。大写A和小写a不一样。

		规则5：标识符理论上是没有长度限制的。


3. Q: 标识符除了命名规则之外，还有命名规范：
		A: 1、命名规则和命名规范有什么区别？
			命名规则是语法，不遵守就会编译报错。
			命名规范只是说，大家尽量按照统一的规范来进行命名，不符合规范也行，
			代码是可以编译通过的，但是你的代码风格和大家不一样，这个通常也是
			不允许的。

			规则类似于：现实世界中的法律。
			规范类似于：现实世界中的道德。

			统一按照规范进行的话，代码的可读性很好。
			代码很容易让其它开发人员理解。

		2、具体的命名规范是哪些？

		A:	规范1：见名知意（这个标识符在起名的时候，最好一看这个单词就知道啥意思。）

			规范2：遵循驼峰命名方式，什么是驼峰（一高一低，一高一低...）
				驼峰有利于单词与单词之间很好的进行分隔
				BiaoShiFuTest，这个很好，一眼就能看出来是4个单词。

			规范3：类名、接口名有特殊要求
				类名和接口名首字母大写，后面每个单词首字母大写。
					StudentTest、UserTest ，这是类名、接口名。

			规范4：变量名、方法名有特殊要求
				变量名和方法名首字母小写，后面每个单词首字母大写。
					nianLing（NianLing这样就不符合了。）
					mingZi（MingZi这样也不符合了。）
			
			规范5：所有“常量”名：全部大写，并且单词和单词之间采用下划线衔接。
				USER_AGE ：用户年龄
				MATH_PI：固定不变的常量3.1415926.....
 */

    }
}